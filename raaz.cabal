cabal-version: 2.2

name:    raaz
version: 0.3.0

synopsis: Fast and type safe cryptography.

description:

  Raaz is a cryptographic library which provides the state of the art
  cryptographic primitives via a high-level, type safe interface. The
  primary focus of raaz is to expose to the user a rather high level
  interface for cryptography with all the problematic parts like the
  selection of primitives, their implementations or for that matter
  system entropy sources etc taken care of automatically. The strong
  type system of Haskell is used to complement this high level
  interface to provide additional security.

  Advanced users sometimes need additional flexibility. For example,
  for compatibility with other protocols, the default primitive
  selection might need changing. This is possible with the current
  interface. In addition, in some rare circumstances a user might want
  to change certain underlying implementations used by the
  library. For example, on a system with GPUs, there might be a faster
  implementation of a primitive or the standard entropy source might
  be weak on certain virtual machines. In such cases, the backpack
  based multi-component structure provided by raaz can be used to
  plugin custom implementation of primitives or system entropy sources
  and still maintain the high level and type safe interface.

homepage: https://github.com/raaz-crypto/raaz

copyright: (c) 2012 Piyush P Kurur
license:      Apache-2.0 OR BSD-3-Clause
license-files: LICENSE-BSD3
               LICENSE-APACHE-2.0

author:       Piyush P Kurur
maintainer:   ppk@cse.iitk.ac.in

category:      Codec, Raaz
build-type:    Simple

data-files: tests/standard-test-vectors/blake2/tests.json

extra-source-files: CHANGELOG.md
                  , README.md

bug-reports: https://github.com/raaz-crypto/raaz/issues
tested-with: GHC==8.2.*
           , GHC==8.4.*
           , GHC==8.6.*
source-repository head
  type: git
  location: https://github.com/raaz-crypto/raaz




------------------------- Flags -------------------------------------------------------------

flag linux-getrandom

     Description: Use the getrandom for system entropy instead of
       /dev/urandom. Enabled by default but disable this when building for kernel < 3.17.

     Default: True
     Manual: True

flag native

     Description: Compile for native architecture. Often this enables
       a lot of platform specific optimisation which lead to better
       performance. Do not enable this when packaging though. Also
       tested only with gcc

     Default: False
     Manual: True

flag wipe-memset

     Description: Use plain memset for wiping memory. The problem with
       its use is that agressive compilers often optimise it out. Raaz
       uses platform specific functions designed specifically to avoid
       this and hence enabling this flag is STRONGLY DISCOURAGED.  Use
       it only if your platform does not support such a call.

     Default: False
     Manual: True

---------------------------- The common clause ------------------------------------------------

common defaults
  default-language: Haskell2010
  ghc-options: -Wall
  default-extensions: NoImplicitPrelude
  build-depends: base                    >= 4.10 &&  < 4.13
               , bytestring              >= 0.10 &&  < 0.11
               , deepseq                 >= 1.4  &&  < 1.5
               , vector                  >= 0.12 &&  < 0.13
               , mtl

  ------------------------ Compiler optimisation flags -------------------------------------
  if flag(native) { cc-options: -march=native  }

  ------------------------ Memory wiping calls  -------------------------------------------
  if !flag(wipe-memset)
     if   os(netbsd)  { cc-options: -DHAVE_EXPLICIT_MEMSET    }
     elif os(windows) { cc-options: -DHAVE_SECURE_ZERO_MEMORY }
     elif !os(osx)    { cc-options: -DHAVE_EXPLICIT_BZERO     }

  ----------------------- System specific configurations ----------------------------------
  if os(linux)   { cc-options: -DPLATFORM_LINUX   }
  if os(osx)     { cc-options: -DPLATFORM_OSX     }
  if os(openbsd) { cc-options: -DPLATFORM_OPENBSD }
  if os(windows)
     cc-options: -DPLATFORM_WINDOWS -DUNICODE
     cpp-options: -DPLATFORM_WINDOWS
     extra-libraries: Advapi32, Kernel32
     build-tools: hsc2hs


----------------------------- The core library ------------------------------------------------
library core
  -- visibility: public
  import: defaults
  hs-source-dirs: core
  exposed-modules: Raaz.Core
                 , Raaz.Core.CpuSupports
                 , Raaz.Core.Prelude
                 , Raaz.Core.Transfer
                 , Raaz.Core.Types
                 , Raaz.Core.Types.Internal
                 , Raaz.Primitive.Blake2.Internal
                 , Raaz.Primitive.Sha2.Internal
                 , Raaz.Primitive.ChaCha20.Internal
                 , Raaz.Primitive.Poly1305.Internal
                 , Raaz.Primitive.HashMemory
                 , Raaz.Primitive.Keyed.Internal

  other-modules: Raaz.Core.ByteSource
               , Raaz.Core.Encode
               , Raaz.Core.Memory
               , Raaz.Core.MonoidalAction
               , Raaz.Core.Parse.Applicative
               , Raaz.Core.Primitive
               , Raaz.Core.Util
               , Raaz.Core.Constants
               , Raaz.Core.Encode.Internal
               , Raaz.Core.Encode.Base16
               , Raaz.Core.Encode.Base64
               , Raaz.Core.IOCont
               , Raaz.Core.Util.ByteString
               , Raaz.Core.Types.Pointer
               , Raaz.Core.Types.Tuple
               , Raaz.Core.Types.Equality
               , Raaz.Core.Types.Endian
               , Raaz.Core.Types.Copying

  c-sources: core/cbits/raaz/core/endian.c
           , core/cbits/raaz/core/memory.c
           , core/cbits/raaz/core/cpusupports.c
  include-dirs: core/cbits
  includes: core/cbits/raaz/core/endian.h
  install-includes: core/cbits/raaz/core/endian.h

----------------------------- Libverse as a sublibrary -----------------------------

library libverse
  import: defaults
  build-depends: core
  hs-source-dirs: libverse
  exposed-modules: Raaz.Verse.Chacha20.C.Portable
                 , Raaz.Verse.Sha512.C.Portable
                 , Raaz.Verse.Sha256.C.Portable
                 , Raaz.Verse.Blake2b.C.Portable
                 , Raaz.Verse.Poly1305.C.Portable
  c-sources: libverse/chacha20/c/portable.c
           , libverse/sha256/c/portable.c
           , libverse/sha512/c/portable.c
           , libverse/blake2b/c/portable.c
           , libverse/poly1305/c/portable.c
           , libverse/verse.c
  include-dirs: libverse
  includes: libverse/verse.h
  install-includes: libverse/verse.h


---------------------- Implementation signature packages -------------
--
-- The first set of indef packages expose an Implementation signature
-- for common block primitives.
--
-- prim-indef: Signature package exposing the signature
--   `Implementation` that captures implementation of a block
--   primitive
--
-- digest-indef: This package adds additional constraints on
--   `prim-indef:Implementation` to capture primitive that produces a
--   digest value at the end of processing data. Examples include
--   cryptographic hashes, MACs, encrypted authenticators etc. In the
--   case of the last one we also encrypt the message (process the
--   input)
--
-- keyed-indef: This package adds additional constraints on
--   `prim-indef:Implementation` to capture primitives that requires a
--   starting (often secret) key. Examples are ciphers, MACs,
--   encrypted authenticators.
--
-- prim-util: Exposes some generic utility function for a
--   primitive. Thus the assumption made is only that of the
--   `Interface` signature provided by the `prim-indef` package.
--

library prim-indef
  -- visibility: public
  import: defaults
  build-depends: core
  hs-source-dirs: indef
  signatures: Implementation

library digest-indef
  -- visibility: public
  import: defaults
  hs-source-dirs: indef/digest
  signatures: Implementation
  build-depends: core
               , prim-indef

library keyed-indef
  import: defaults
  hs-source-dirs: indef/keyed
  signatures: Implementation
  build-depends: core
               , prim-indef


library prim-utils
  import: defaults
  build-depends: core
               , prim-indef
  hs-source-dirs: indef
  exposed-modules: Utils

-------------------- Derived Implementations ----------------------------
--
-- Certain primitives are defined based on other primitive. Given
-- below are indef packages for these.
--
-- mac-indef: Certain hashes like blake2 supports a simple keyed
--   hashing algorithm that can be used as message authentication
--   code. This module exposes the module `Mac.Implementation` which
--   can be mixed into the auth-api module to satisfy its
--   requirement of an `Implementation` module.


library mac-indef
  import: defaults
  hs-source-dirs: indef/keyed/hash
  signatures: Implementation
  build-depends: core
               , prim-utils
  exposed-modules: Mac.Implementation

-------- API packages ----------------------------------------------
--
-- An api package provides an `Interface` module for some common
-- cryptographic operations. Typically they depend on one or more of
-- the implementation modules.
--
-- hash-indef: Provides cryptographic hashes/message digests
--
-- auth-api: Provides message authentication
--
-- random-api: Provides cryptographically secure pseudo-random
--   generator making use of system entropy for seeding and a suitable
--   primitive (typically a cipher) for stretching the seed.

library hash-api
  import: defaults
  hs-source-dirs: indef/digest/hash
  signatures: Implementation
  build-depends: core
               , digest-indef
               , prim-utils
  exposed-modules: Interface


library auth-api
  import: defaults
  hs-source-dirs: indef/auth
  build-depends: core
               , keyed-indef
               , digest-indef
               , prim-utils
  exposed-modules: Interface

library random-api
  import: defaults
  hs-source-dirs: indef/random
  build-depends: core
               , prim-indef
               , prim-utils
               , libverse
  signatures: Implementation
            , Entropy
  exposed-modules: Interface
                 , Internal
  other-modules: PRGState

--------------------  The implementation modules ----------------------------------
--
-- This package exposes all the implementations provided by the raaz
-- library. In addition, for all primitives Prim supported by raaz, it
-- exposes a default Prim.Implementation module. Therefore, adding
-- this package to the dependency of another package that needs an
-- implementation of Prim (via the module hole Prim.Implementation)
-- satisfies the requirement.
--
-- One can selectively override the implementation used by a primitive
-- using the idiom
--
-- build-depends: raaz-indef
--              , implementation
-- mixins: raaz-indef requires (ChaCha20.Implementation as ChaCha20.CHandWritten)
--
--
-- The above lines ensures that the interface provided by raaz-indef
-- for ChaCha20, uses the the Hand Written implementation while all
-- other primitives uses the default implementation (set in the
-- implementation package).

library implementation
  -- visibility: public
  import: defaults
  build-depends: core
               , libverse
  hs-source-dirs: implementation, implementation/entropy
  exposed-modules: Blake2b.CPortable
                 , Sha256.CPortable
                 , ChaCha20.CPortable
                 , Sha512.CPortable
                 -- Implementation hand written in C
                 , ChaCha20.CHandWritten
                 , Blake2b.CHandWritten
                 , Blake2s.CHandWritten
                 , Poly1305.CPortable
                 , Sha256.CHandWritten
                 , Sha512.CHandWritten

  -- By re-exporting the modules, we are giving a default selection
  -- for implementations.
  reexported-modules: Blake2b.CPortable as Blake2b.Implementation
                    , Blake2s.CHandWritten as Blake2s.Implementation
                    , ChaCha20.CPortable   as ChaCha20.Implementation
                    , Sha256.CPortable     as Sha256.Implementation
                    , Poly1305.CPortable   as Poly1305.Implementation
                    , Sha512.CPortable     as Sha512.Implementation
  other-modules: Poly1305.Memory
  c-sources: implementation/cbits/raaz/hash/blake2/blake2b/portable.c
           , implementation/cbits/raaz/hash/blake2/blake2s/portable.c
           , implementation/cbits/raaz/hash/sha1/portable.c
           , implementation/cbits/raaz/hash/sha256/portable.c
           , implementation/cbits/raaz/hash/sha512/portable.c
           , implementation/cbits/raaz/cipher/chacha20/cportable.c
  include-dirs: implementation/cbits/
  includes: implementation/cbits/raaz/hash/blake2/common.h
          , implementation/cbits/raaz/hash/blake2/blake2b/constants.h
          , implementation/cbits/raaz/hash/blake2/blake2s/constants.h

  -------------------------- Implementation of system entropy ----------------------------
  --
  -- The next conditionals perform the following configuration tasks.
  --
  -- 1. Expose *all* the available sources of entropy.
  --
  -- 2. Reexport the most desirable source as the module Entropy. This
  -- way by mixing in the implementation component, the correct
  -- entropy source is used (which can be overridden by the user if
  -- they so wish -- do not try that unless you know what you are
  -- doing)

  if os(windows)
     exposed-modules: Windows.Entropy
     reexported-modules: Windows.Entropy as Entropy
  else
     exposed-modules: URandom.Entropy
     if os(openbsd) || os(netbsd)
        exposed-modules: ARC4Random.Entropy
        reexported-modules: ARC4Random.Entropy as Entropy
    elif os(linux)   && flag(linux-getrandom)
        exposed-modules: GetRandom.Entropy
        reexported-modules: GetRandom.Entropy as Entropy
    else
        reexported-modules: URandom.Entropy as Entropy


-------------------- The raaz indef package ------------------------
--
-- This is the indef package to use if you want to get an interface
-- similar to raaz and want to override the implementations.

library raaz-indef
  -- visibility: public
  import: defaults
  build-depends: core
               , hash-api
               , random-api
               , auth-api
               , mac-indef
  hs-source-dirs: prims/sha2
                , prims/blake2
  signatures: Blake2b.Implementation
            , Blake2s.Implementation
            , Sha256.Implementation
            , Sha512.Implementation
  reexported-modules: Auth.Blake2b
                    , Auth.Blake2s
                    , Digest.Blake2b
                    , Digest.Blake2s
                    , Digest.Sha256
                    , Digest.Sha512
                    , Random
                    , Random.Internal
  mixins: hash-api (Interface as Digest.Blake2b)
            requires (Implementation as Blake2b.Implementation)
        , hash-api (Interface as Digest.Blake2s)
            requires (Implementation as Blake2s.Implementation)
        , hash-api (Interface as Digest.Sha512)
            requires (Implementation as Sha512.Implementation)
        , hash-api (Interface as Digest.Sha256)
            requires (Implementation as Sha256.Implementation)
        , random-api (Interface as Random, Internal as Random.Internal)
            requires (Implementation as ChaCha20.Implementation)
        -- MAC-ing with blake2b
        , mac-indef (Mac.Implementation as Blake2b.Mac.Implementation)
            requires (Implementation as Blake2b.Implementation)
        , auth-api (Interface as Auth.Blake2b) requires (Implementation as Blake2b.Mac.Implementation)

        -- MAC-ing with blake2s
        , mac-indef (Mac.Implementation as Blake2s.Mac.Implementation)
            requires (Implementation as Blake2s.Implementation)
        , auth-api (Interface as Auth.Blake2s) requires (Implementation as Blake2s.Mac.Implementation)


-------------------------------- The main raaz library -------------------------------------

library
  import: defaults
  hs-source-dirs: raaz
  build-depends: core
               , implementation
               , raaz-indef
  exposed-modules: Raaz
  reexported-modules: Auth.Blake2b       as Raaz.Auth.Blake2b
                    , Auth.Blake2s       as Raaz.Auth.Blake2s
                    , Digest.Blake2b     as Raaz.Digest.Blake2b
                    , Digest.Blake2s     as Raaz.Digest.Blake2s
                    , Digest.Sha512      as Raaz.Digest.Sha512
                    , Digest.Sha256      as Raaz.Digest.Sha256
                    , Random             as Raaz.Random
                    , Random.Internal    as Raaz.Random.Internal
                    , Raaz.Core
                    , Raaz.Core.Types
  autogen-modules: Paths_raaz
  other-modules: Paths_raaz
               , Raaz.V1

---------------------------- Executables -------------------------------------------------

executable raaz
  import: defaults
  hs-source-dirs: raaz/bin
  main-is: Main.hs
  other-modules: Command.Rand
               , Command.Info
               , Command.Checksum
               , Usage
  build-depends: optparse-applicative >= 0.13.0.0
               , core
               , raaz
  if impl(ghc < 8)
    -- 'transformers' needed for "Control.Monad.IO.Class" only
    -- starting with base-4.9 we don't need 'transformers' anymore
    build-depends: transformers

---------------------------------- Test suit -----------------------------------------------------
common test-defaults
  import: defaults
  build-depends: core
               , HUnit                          >= 1.2
               , QuickCheck                     >= 2.4
               , hspec

library test-core
  -- visibility: private
  import: test-defaults
  hs-source-dirs: tests/core
  exposed-modules: Tests.Core
                 , Tests.Core.Imports
                 , Tests.Core.Instances
                 , Tests.Core.Utils

library test-cipher
  import: test-defaults
  hs-source-dirs: tests/cipher
  build-depends: test-core
               , prim-indef
               , keyed-indef
               , prim-utils
  exposed-modules: Tests.Cipher

library test-hash
  import: test-defaults
  hs-source-dirs: tests/message-digest
  build-depends: test-core
               , prim-indef
               , hash-api
               , prim-utils
  exposed-modules: Tests.Digest
                 , Tests.Digest.Compare
  mixins: hash-api (Interface as AlternateInterface) requires (Implementation as Alternate)
        , hash-api

library test-auth
  import: test-defaults
  hs-source-dirs: tests/auth
  build-depends: test-core
               , prim-indef
               , auth-api
  exposed-modules: Tests.Auth

-------------------------- The test suits -------------------------

test-suite tests
  import: test-defaults
  type: exitcode-stdio-1.0
  hs-source-dirs: tests
  main-is: Spec.hs
  build-depends: hspec-discover
               , attoparsec
               , test-core
               , test-cipher
               , test-hash
               , test-auth
               , mac-indef
               , implementation
               , raaz
  build-tool-depends: hspec-discover:hspec-discover
  if !os(windows)
    cpp-options: -DHAVE_DEV_NULL

  other-modules: Raaz.Core.ByteSourceSpec
               , Raaz.Core.EncodeSpec
               , Raaz.Core.MemorySpec
               , Raaz.Core.Types.WordSpec
               , Raaz.Core.Util.ByteStringSpec
               , Raaz.RandomSpec
               , Raaz.Cipher.ChaCha20Spec
               , Raaz.Digest.Sha256Spec
               , Raaz.Digest.Sha512Spec
               , Raaz.Digest.Blake2Spec
               , Raaz.Mac.Poly1305Spec
               , Paths_raaz

  mixins: test-cipher requires (Implementation as ChaCha20.Implementation)
        , test-hash (Tests.Digest as Sha256.Digest, Tests.Digest.Compare as Sha256.VsHandwritten)
          requires (Implementation as Sha256.Implementation, Alternate as Sha256.CHandWritten)

        , test-hash (Tests.Digest as Sha512.Digest, Tests.Digest.Compare as Sha512.VsHandwritten)
          requires (Implementation as Sha512.Implementation, Alternate as Sha512.CHandWritten)

        , test-hash (Tests.Digest as Blake2b.Digest, Tests.Digest.Compare as Blake2b.VsHandwritten)
          requires (Implementation as Blake2b.Implementation, Alternate as Blake2b.CHandWritten)

        , test-hash (Tests.Digest as Blake2s.Digest, Tests.Digest.Compare as Blake2s.VsHandwritten)
          requires (Implementation as Blake2s.Implementation, Alternate as Blake2s.CHandWritten)


        , test-auth (Tests.Auth as Poly1305.Auth)     requires (Implementation as Poly1305.Implementation)

        , mac-indef (Mac.Implementation as Blake2s.Mac.Implementation)
            requires (Implementation as Blake2s.Implementation)
        , test-auth  (Tests.Auth as Blake2s.Auth) requires (Implementation as Blake2s.Mac.Implementation)

        , mac-indef (Mac.Implementation as Blake2b.Mac.Implementation)
            requires (Implementation as Blake2b.Implementation)
        , test-auth  (Tests.Auth as Blake2b.Auth) requires (Implementation as Blake2b.Mac.Implementation)

--------------------------- Benchmarkings ---------------------------------------------
common bench-defaults
 import:defaults
 hs-source-dirs: benchmarks/internal
 build-depends:  criterion-measurement     >= 0.1
               , pretty
               , core

library bench-types
  import: bench-defaults
  exposed-modules: Benchmark.Types

library bench-prim
  import: bench-defaults
  build-depends: bench-types
               , prim-indef
               , prim-utils
  other-modules: Benchmark.Types
  exposed-modules: Benchmark.Primitive

library bench-csprg
  import: bench-defaults
  build-depends: bench-types
               , prim-utils
               , random-api
  exposed-modules: Benchmark.CSPRG
  other-modules: Benchmark.Types


benchmark primitives
  import: bench-defaults
  hs-source-dirs: benchmarks
  main-is: Main.hs
  type: exitcode-stdio-1.0
  build-depends: pretty
               , core
               , implementation
               , bench-types
               , bench-prim
               , bench-csprg
  other-modules: Benchmark.Types
  mixins: bench-prim (Benchmark.Primitive as Benchmark.Blake2b.CPortable)
          requires   (Implementation as Blake2b.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Blake2b.CHandWritten)
          requires   (Implementation as Blake2b.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Blake2s.CHandWritten)
          requires   (Implementation as Blake2s.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.ChaCha20.CPortable)
          requires   (Implementation as ChaCha20.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.ChaCha20.CHandWritten)
          requires   (Implementation as ChaCha20.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Poly1305.CPortable)
          requires   (Implementation as Poly1305.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha256.CPortable)
          requires   (Implementation as Sha256.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha256.CHandWritten)
          requires   (Implementation as Sha256.CHandWritten)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha512.CPortable)
          requires (Implementation as Sha512.CPortable)

        , bench-prim (Benchmark.Primitive as Benchmark.Sha512.CHandWritten)
          requires (Implementation as Sha512.CHandWritten)

        , bench-csprg (Benchmark.CSPRG as Benchmark.CSPRG.CPortable)
          requires (Implementation as ChaCha20.CPortable)
