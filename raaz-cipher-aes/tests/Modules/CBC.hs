{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}
module Modules.CBC
       ( tests
       ) where

import Data.ByteString               (ByteString,pack)
import Test.Framework                (Test,testGroup)

import Raaz.Test                     ()
import Raaz.Test.Cipher
import Raaz.Test.Gadget              (testGadget)
import Raaz.Primitives
import Raaz.Primitives.Cipher

import Raaz.Cipher.AES.Type
import Raaz.Cipher.AES.CBC.Ref       ()
import Raaz.Cipher.AES.CBC.CPortable ()
import Raaz.Cipher.AES.CBC.Type


import Modules.Block.Ref             ()

-- From http://www.inconteam.com/software-development/41-encryption/55-aes-test-vectors
standard128Vector :: [(ByteString,ByteString,ByteString)]
standard128Vector =
  [ ( pack [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
           ,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F]
    , pack [0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a]
    , pack [0x76,0x49,0xab,0xac,0x81,0x19,0xb2,0x46,0xce,0xe9,0x8e,0x9b,0x12,0xe9,0x19,0x7d] )
  , ( pack [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
           ,0x76,0x49,0xAB,0xAC,0x81,0x19,0xB2,0x46,0xCE,0xE9,0x8E,0x9B,0x12,0xE9,0x19,0x7D]
    , pack [0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51]
    , pack [0x50,0x86,0xcb,0x9b,0x50,0x72,0x19,0xee,0x95,0xdb,0x11,0x3a,0x91,0x76,0x78,0xb2] )
  , ( pack [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
           ,0x50,0x86,0xCB,0x9B,0x50,0x72,0x19,0xEE,0x95,0xDB,0x11,0x3A,0x91,0x76,0x78,0xB2]
    , pack [0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef]
    , pack [0x73,0xbe,0xd6,0xb8,0xe3,0xc1,0x74,0x3b,0x71,0x16,0xe6,0x9e,0x22,0x22,0x95,0x16] )
  , ( pack [0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
           ,0x73,0xBE,0xD6,0xB8,0xE3,0xC1,0x74,0x3B,0x71,0x16,0xE6,0x9E,0x22,0x22,0x95,0x16]
    , pack [0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10]
    , pack [0x3f,0xf1,0xca,0xa1,0x68,0x1f,0xac,0x09,0x12,0x0e,0xca,0x30,0x75,0x86,0xe1,0xa7] )
  ]

standard192Vector :: [(ByteString,ByteString,ByteString)]
standard192Vector =
  [ ( pack [0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
           ,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F]
    , pack [0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a]
    , pack [0x4f,0x02,0x1d,0xb2,0x43,0xbc,0x63,0x3d,0x71,0x78,0x18,0x3a,0x9f,0xa0,0x71,0xe8] )
  , ( pack [0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
           ,0x4F,0x02,0x1D,0xB2,0x43,0xBC,0x63,0x3D,0x71,0x78,0x18,0x3A,0x9F,0xA0,0x71,0xE8]
    , pack [0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51]
    , pack [0xb4,0xd9,0xad,0xa9,0xad,0x7d,0xed,0xf4,0xe5,0xe7,0x38,0x76,0x3f,0x69,0x14,0x5a] )
  , ( pack [0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
           ,0xB4,0xD9,0xAD,0xA9,0xAD,0x7D,0xED,0xF4,0xE5,0xE7,0x38,0x76,0x3F,0x69,0x14,0x5A]
    , pack [0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef]
    , pack [0x57,0x1b,0x24,0x20,0x12,0xfb,0x7a,0xe0,0x7f,0xa9,0xba,0xac,0x3d,0xf1,0x02,0xe0] )
  , ( pack [0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
           ,0x57,0x1B,0x24,0x20,0x12,0xFB,0x7A,0xE0,0x7F,0xA9,0xBA,0xAC,0x3D,0xF1,0x02,0xE0]
    , pack [0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10]
    , pack [0x08,0xb0,0xe2,0x79,0x88,0x59,0x88,0x81,0xd9,0x20,0xa9,0xe6,0x4f,0x56,0x15,0xcd] )
  ]

standard256Vector :: [(ByteString,ByteString,ByteString)]
standard256Vector =
  [ ( pack [0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
           ,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F]
    , pack [0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a]
    , pack [0xf5,0x8c,0x4c,0x04,0xd6,0xe5,0xf1,0xba,0x77,0x9e,0xab,0xfb,0x5f,0x7b,0xfb,0xd6] )
  , ( pack [0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
           ,0xF5,0x8C,0x4C,0x04,0xD6,0xE5,0xF1,0xBA,0x77,0x9E,0xAB,0xFB,0x5F,0x7B,0xFB,0xD6]
    , pack [0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51]
    , pack [0x9c,0xfc,0x4e,0x96,0x7e,0xdb,0x80,0x8d,0x67,0x9f,0x77,0x7b,0xc6,0x70,0x2c,0x7d] )
  , ( pack [0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
           ,0x9C,0xFC,0x4E,0x96,0x7E,0xDB,0x80,0x8D,0x67,0x9F,0x77,0x7B,0xC6,0x70,0x2C,0x7D]
    , pack [0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef]
    , pack [0x39,0xf2,0x33,0x69,0xa9,0xd9,0xba,0xcf,0xa5,0x30,0xe2,0x63,0x04,0x23,0x14,0x61] )
  , ( pack [0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
           ,0x39,0xF2,0x33,0x69,0xA9,0xD9,0xBA,0xCF,0xA5,0x30,0xE2,0x63,0x04,0x23,0x14,0x61]
    , pack [0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10]
    , pack [0xb2,0xeb,0x05,0xe2,0xc3,0x9b,0xe9,0xfc,0xda,0x6c,0x19,0x07,0x8c,0x6a,0x9d,0x1b] )
  ]

standard128 :: (Gadget g1, Gadget g2, Initializable (PrimitiveOf g1), Initializable (PrimitiveOf g2))
            => g1 -> g2 -> [Test]
standard128 g1 g2 = testStandardCiphers g1 standard128Vector "AES128 CBC Encryption" ++
                    testStandardCiphers g2 (toDecryption standard128Vector) "AES128 CBC Decryption"

standard192 :: (Gadget g1, Gadget g2, Initializable (PrimitiveOf g1), Initializable (PrimitiveOf g2))
            => g1 -> g2 -> [Test]
standard192 g1 g2 = testStandardCiphers g1 standard192Vector "AES192 CBC Encryption" ++
                    testStandardCiphers g2 (toDecryption standard192Vector) "AES192 CBC Decryption"

standard256 :: (Gadget g1, Gadget g2, Initializable (PrimitiveOf g1), Initializable (PrimitiveOf g2))
            => g1 -> g2 -> [Test]
standard256 g1 g2 = testStandardCiphers g1 standard256Vector "AES256 CBC Encryption" ++
                    testStandardCiphers g2 (toDecryption standard256Vector) "AES256 CBC Decryption"

cportableVsReference :: ( Gadget g1
                        , Gadget g2
                        , (PrimitiveOf g1) ~ (PrimitiveOf g2)
                        , Initializable (PrimitiveOf g2)
                        , Eq (PrimitiveOf g1))
                     => g1 -> g2 -> IV (PrimitiveOf g1) -> Test
cportableVsReference g1 g2 iv = testGadget g1 g2 iv "CPortable vs Reference"

testKey128E :: IV (AES128 CBC Encryption)
testKey128E =  getIV $ pack [0x2b,0x7e,0x15,0x16
                            ,0x28,0xae,0xd2,0xa6
                            ,0xab,0xf7,0x15,0x88
                            ,0x09,0xcf,0x4f,0x3c
                            ,0x00,0x01,0x02,0x03
                            ,0x04,0x05,0x06,0x07
                            ,0x08,0x09,0x0A,0x0B
                            ,0x0C,0x0D,0x0E,0x0F]

testKey192E :: IV (AES192 CBC Encryption)
testKey192E =  getIV $ pack [0x8e,0x73,0xb0,0xf7
                            ,0xda,0x0e,0x64,0x52
                            ,0xc8,0x10,0xf3,0x2b
                            ,0x80,0x90,0x79,0xe5
                            ,0x62,0xf8,0xea,0xd2
                            ,0x52,0x2c,0x6b,0x7b
                            ,0x00,0x01,0x02,0x03
                            ,0x04,0x05,0x06,0x07
                            ,0x08,0x09,0x0A,0x0B
                            ,0x0C,0x0D,0x0E,0x0F]


testKey256E :: IV (AES256 CBC Encryption)
testKey256E =  getIV $ pack [0x60,0x3d,0xeb,0x10
                            ,0x15,0xca,0x71,0xbe
                            ,0x2b,0x73,0xae,0xf0
                            ,0x85,0x7d,0x77,0x81
                            ,0x1f,0x35,0x2c,0x07
                            ,0x3b,0x61,0x08,0xd7
                            ,0x2d,0x98,0x10,0xa3
                            ,0x09,0x14,0xdf,0xf4
                            ,0x00,0x01,0x02,0x03
                            ,0x04,0x05,0x06,0x07
                            ,0x08,0x09,0x0A,0x0B
                            ,0x0C,0x0D,0x0E,0x0F]


testKey128D :: IV (AES128 CBC Decryption)
testKey128D =  getIV $ pack [0x2b,0x7e,0x15,0x16
                            ,0x28,0xae,0xd2,0xa6
                            ,0xab,0xf7,0x15,0x88
                            ,0x09,0xcf,0x4f,0x3c
                            ,0x00,0x01,0x02,0x03
                            ,0x04,0x05,0x06,0x07
                            ,0x08,0x09,0x0A,0x0B
                            ,0x0C,0x0D,0x0E,0x0F]


testKey192D:: IV (AES192 CBC Decryption)
testKey192D =  getIV $ pack [0x8e,0x73,0xb0,0xf7
                            ,0xda,0x0e,0x64,0x52
                            ,0xc8,0x10,0xf3,0x2b
                            ,0x80,0x90,0x79,0xe5
                            ,0x62,0xf8,0xea,0xd2
                            ,0x52,0x2c,0x6b,0x7b
                            ,0x00,0x01,0x02,0x03
                            ,0x04,0x05,0x06,0x07
                            ,0x08,0x09,0x0A,0x0B
                            ,0x0C,0x0D,0x0E,0x0F]


testKey256D :: IV (AES256 CBC Decryption)
testKey256D =  getIV $ pack [0x60,0x3d,0xeb,0x10
                            ,0x15,0xca,0x71,0xbe
                            ,0x2b,0x73,0xae,0xf0
                            ,0x85,0x7d,0x77,0x81
                            ,0x1f,0x35,0x2c,0x07
                            ,0x3b,0x61,0x08,0xd7
                            ,0x2d,0x98,0x10,0xa3
                            ,0x09,0x14,0xdf,0xf4
                            ,0x00,0x01,0x02,0x03
                            ,0x04,0x05,0x06,0x07
                            ,0x08,0x09,0x0A,0x0B
                            ,0x0C,0x0D,0x0E,0x0F]


toDecryption :: [(a,b,c)] -> [(a,c,b)]
toDecryption = map (\(a,b,c) -> (a,c,b))


tests :: [Test]
tests = [ testGroup "AES128 CBC Reference" $ standard128 r128E r128D
        , testGroup "AES192 CBC Reference" $ standard192 r192E r192D
        , testGroup "AES256 CBC Reference" $ standard256 r256E r256D
        , testGroup "AES128 CBC CPortable" $ standard128 c128E c128D
        , testGroup "AES192 CBC CPortable" $ standard192 c192E c192D
        , testGroup "AES256 CBC CPortable" $ standard256 c256E c256D
        , testGroup "AES128 CBC CPortable vs Reference"
          [ cportableVsReference c128E r128E testKey128E
          , cportableVsReference c128D r128D testKey128D ]
        , testGroup "AES192 CBC CPortable vs Reference"
          [ cportableVsReference c192E r192E testKey192E
          , cportableVsReference c192D r192D testKey192D ]
        , testGroup "AES256 CBC CPortable vs Reference"
          [ cportableVsReference c256E r256E testKey256E
          , cportableVsReference c256D r256D testKey256D ]
        ]
  where
    r128E :: Ref128 Encryption
    r128E = undefined
    r128D :: Ref128 Decryption
    r128D = undefined
    r192E :: Ref192 Encryption
    r192E = undefined
    r192D :: Ref192 Decryption
    r192D = undefined
    r256E :: Ref256 Encryption
    r256E = undefined
    r256D :: Ref256 Decryption
    r256D = undefined
    c128E :: CPortable128 Encryption
    c128E = undefined
    c128D :: CPortable128 Decryption
    c128D = undefined
    c192E :: CPortable192 Encryption
    c192E = undefined
    c192D :: CPortable192 Decryption
    c192D = undefined
    c256E :: CPortable256 Encryption
    c256E = undefined
    c256D :: CPortable256 Decryption
    c256D = undefined
