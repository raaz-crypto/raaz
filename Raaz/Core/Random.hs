{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE DefaultSignatures #-}
{-# LANGUAGE CPP               #-}
module Raaz.Core.Random
  ( PRG(..), Random(..), Seedable(..), fillRandom

#ifdef HAVE_SYSTEM_PRG
  , SystemPRG
  , newSystemPRG
#endif

  ) where

import Control.Applicative
import Control.Monad   (void)
import Data.Word
import Foreign.Ptr     (castPtr)
import Foreign.Storable(Storable, peek)


import System.IO ( openBinaryFile, Handle, IOMode(ReadMode)
                 , BufferMode(NoBuffering), hSetBuffering
                 )
import Prelude

import Raaz.Core.Types
import Raaz.Core.Random.PRG

-- | Stuff that can be generated by a pseudo-random generator.
class Random r where
  getRandom :: PRG prg => prg -> IO r

  default getRandom :: (PRG prg, Storable r) => prg -> IO r
  getRandom = go undefined
    where go       :: (PRG prg, Storable a) => a -> prg -> IO a
          go w prg = let sz = byteSize w in
            allocaBuffer sz $ \ ptr -> do
              void $ fillRandomBytes sz ptr prg
              peek $ castPtr ptr

instance Random Word
instance Random Word16
instance Random Word32
instance Random Word64

instance Random w => Random (LE w) where
  getRandom = fmap littleEndian . getRandom

instance Random w => Random (BE w) where
  getRandom= fmap bigEndian . getRandom

instance (Random a, Random b) => Random (a,b) where
  getRandom prg = (,) <$> getRandom prg <*> getRandom prg

instance (Random a, Random b, Random c) => Random (a,b,c) where
  getRandom prg = (,,) <$> getRandom prg <*> getRandom prg <*> getRandom prg

#ifdef HAVE_SYSTEM_PRG
-- | The system wide pseudo-random generator. The source is expected
-- to be of high quality, albeit a bit slow due to system call
-- overheads. It is expected that this source is automatically seeded
-- from the entropy pool maintained by the platform. Hence, it is
-- neither necessary nor possible to seed this generator.
--
-- Currently only POSIX platforms are supported where the file
-- @\/dev\/urandom@ acts as the underlying randomness source.
--
-- TODO: Support other platforms.
--

#ifdef HAVE_DEV_URANDOM

newtype SystemPRG = SystemPRG Handle

-- | Get a new instance of the system PRG.
newSystemPRG :: IO SystemPRG
newSystemPRG = do h <- openBinaryFile "/dev/urandom" ReadMode
                  hSetBuffering h NoBuffering
                  return $ SystemPRG h

instance PRG SystemPRG where
  fillRandomBytes sz ptr (SystemPRG hand) = void $ hFillBuf hand ptr sz

#endif

#endif
