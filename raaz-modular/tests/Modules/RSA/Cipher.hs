module Modules.RSA.Cipher (tests) where

import           Data.ByteString                (ByteString)
import qualified Data.ByteString                as BS
import           Test.Framework                 (Test,testGroup)
import           Test.HUnit                     ((@=?), Assertion)
import           Test.Framework.Providers.HUnit (testCase)

import           Raaz.Primitives
import           Raaz.Types
import           Raaz.Test.Cipher               (shorten)

import           Raaz.RSA.Primitives
import           Raaz.RSA.Types
import           Raaz.Hash.Sha1

--  https://das-labor.org/svn/microcontroller-2/crypto-lib/testvectors/rsa-pkcs-1v2-1-vec/pkcs1v15crypt-vectors.txt
testPubKey :: PublicKey
testPubKey = PublicKey (BYTES $ length n) (os2ip $ BS.pack n) (os2ip $ BS.pack e)
  where
    n = [0xa8,0xb3,0xb2,0x84,0xaf,0x8e,0xb5,0x0b,0x38,0x70,0x34,0xa8,0x60,0xf1
        ,0x46,0xc4,0x91,0x9f,0x31,0x87,0x63,0xcd,0x6c,0x55,0x98,0xc8,0xae,0x48
        ,0x11,0xa1,0xe0,0xab,0xc4,0xc7,0xe0,0xb0,0x82,0xd6,0x93,0xa5,0xe7,0xfc
        ,0xed,0x67,0x5c,0xf4,0x66,0x85,0x12,0x77,0x2c,0x0c,0xbc,0x64,0xa7,0x42
        ,0xc6,0xc6,0x30,0xf5,0x33,0xc8,0xcc,0x72,0xf6,0x2a,0xe8,0x33,0xc4,0x0b
        ,0xf2,0x58,0x42,0xe9,0x84,0xbb,0x78,0xbd,0xbf,0x97,0xc0,0x10,0x7d,0x55
        ,0xbd,0xb6,0x62,0xf5,0xc4,0xe0,0xfa,0xb9,0x84,0x5c,0xb5,0x14,0x8e,0xf7
        ,0x39,0x2d,0xd3,0xaa,0xff,0x93,0xae,0x1e,0x6b,0x66,0x7b,0xb3,0xd4,0x24
        ,0x76,0x16,0xd4,0xf5,0xba,0x10,0xd4,0xcf,0xd2,0x26,0xde,0x88,0xd3,0x9f
        ,0x16,0xfb]
    e = [0x01,0x00,0x01]

testPrivKey :: PrivateKey
testPrivKey = PrivateKey (BYTES $ length n)
                         (os2ip $ BS.pack n)
                         (os2ip $ BS.pack e)
                         (os2ip $ BS.pack d)
                         (os2ip $ BS.pack p)
                         (os2ip $ BS.pack q)
                         (os2ip $ BS.pack dp)
                         (os2ip $ BS.pack dq)
                         (os2ip $ BS.pack qinv)
  where
    n = [0xa8,0xb3,0xb2,0x84,0xaf,0x8e,0xb5,0x0b,0x38,0x70,0x34,0xa8,0x60,0xf1
        ,0x46,0xc4,0x91,0x9f,0x31,0x87,0x63,0xcd,0x6c,0x55,0x98,0xc8,0xae,0x48
        ,0x11,0xa1,0xe0,0xab,0xc4,0xc7,0xe0,0xb0,0x82,0xd6,0x93,0xa5,0xe7,0xfc
        ,0xed,0x67,0x5c,0xf4,0x66,0x85,0x12,0x77,0x2c,0x0c,0xbc,0x64,0xa7,0x42
        ,0xc6,0xc6,0x30,0xf5,0x33,0xc8,0xcc,0x72,0xf6,0x2a,0xe8,0x33,0xc4,0x0b
        ,0xf2,0x58,0x42,0xe9,0x84,0xbb,0x78,0xbd,0xbf,0x97,0xc0,0x10,0x7d,0x55
        ,0xbd,0xb6,0x62,0xf5,0xc4,0xe0,0xfa,0xb9,0x84,0x5c,0xb5,0x14,0x8e,0xf7
        ,0x39,0x2d,0xd3,0xaa,0xff,0x93,0xae,0x1e,0x6b,0x66,0x7b,0xb3,0xd4,0x24
        ,0x76,0x16,0xd4,0xf5,0xba,0x10,0xd4,0xcf,0xd2,0x26,0xde,0x88,0xd3,0x9f
        ,0x16,0xfb]

    e = [0x01,0x00,0x01]

    d = [0x53,0x33,0x9c,0xfd,0xb7,0x9f,0xc8,0x46,0x6a,0x65,0x5c,0x73,0x16,0xac,0xa8,0x5c
        ,0x55,0xfd,0x8f,0x6d,0xd8,0x98,0xfd,0xaf,0x11,0x95,0x17,0xef,0x4f,0x52,0xe8,0xfd
        ,0x8e,0x25,0x8d,0xf9,0x3f,0xee,0x18,0x0f,0xa0,0xe4,0xab,0x29,0x69,0x3c,0xd8,0x3b
        ,0x15,0x2a,0x55,0x3d,0x4a,0xc4,0xd1,0x81,0x2b,0x8b,0x9f,0xa5,0xaf,0x0e,0x7f,0x55
        ,0xfe,0x73,0x04,0xdf,0x41,0x57,0x09,0x26,0xf3,0x31,0x1f,0x15,0xc4,0xd6,0x5a,0x73
        ,0x2c,0x48,0x31,0x16,0xee,0x3d,0x3d,0x2d,0x0a,0xf3,0x54,0x9a,0xd9,0xbf,0x7c,0xbf
        ,0xb7,0x8a,0xd8,0x84,0xf8,0x4d,0x5b,0xeb,0x04,0x72,0x4d,0xc7,0x36,0x9b,0x31,0xde
        ,0xf3,0x7d,0x0c,0xf5,0x39,0xe9,0xcf,0xcd,0xd3,0xde,0x65,0x37,0x29,0xea,0xd5,0xd1]

    p = [0xd3,0x27,0x37,0xe7,0x26,0x7f,0xfe,0x13,0x41,0xb2,0xd5,0xc0,0xd1,0x50,0xa8,0x1b
        ,0x58,0x6f,0xb3,0x13,0x2b,0xed,0x2f,0x8d,0x52,0x62,0x86,0x4a,0x9c,0xb9,0xf3,0x0a
        ,0xf3,0x8b,0xe4,0x48,0x59,0x8d,0x41,0x3a,0x17,0x2e,0xfb,0x80,0x2c,0x21,0xac,0xf1
        ,0xc1,0x1c,0x52,0x0c,0x2f,0x26,0xa4,0x71,0xdc,0xad,0x21,0x2e,0xac,0x7c,0xa3,0x9d]

    q = [0xcc,0x88,0x53,0xd1,0xd5,0x4d,0xa6,0x30,0xfa,0xc0,0x04,0xf4,0x71,0xf2,0x81,0xc7
        ,0xb8,0x98,0x2d,0x82,0x24,0xa4,0x90,0xed,0xbe,0xb3,0x3d,0x3e,0x3d,0x5c,0xc9,0x3c
        ,0x47,0x65,0x70,0x3d,0x1d,0xd7,0x91,0x64,0x2f,0x1f,0x11,0x6a,0x0d,0xd8,0x52,0xbe
        ,0x24,0x19,0xb2,0xaf,0x72,0xbf,0xe9,0xa0,0x30,0xe8,0x60,0xb0,0x28,0x8b,0x5d,0x77]

    dp = [0x0e,0x12,0xbf,0x17,0x18,0xe9,0xce,0xf5,0x59,0x9b,0xa1,0xc3,0x88,0x2f,0xe8,0x04
         ,0x6a,0x90,0x87,0x4e,0xef,0xce,0x8f,0x2c,0xcc,0x20,0xe4,0xf2,0x74,0x1f,0xb0,0xa3
          ,0x3a,0x38,0x48,0xae,0xc9,0xc9,0x30,0x5f,0xbe,0xcb,0xd2,0xd7,0x68,0x19,0x96,0x7d
          ,0x46,0x71,0xac,0xc6,0x43,0x1e,0x40,0x37,0x96,0x8d,0xb3,0x78,0x78,0xe6,0x95,0xc1]

    dq = [0x95,0x29,0x7b,0x0f,0x95,0xa2,0xfa,0x67,0xd0,0x07,0x07,0xd6,0x09,0xdf,0xd4,0xfc
         ,0x05,0xc8,0x9d,0xaf,0xc2,0xef,0x6d,0x6e,0xa5,0x5b,0xec,0x77,0x1e,0xa3,0x33,0x73
         ,0x4d,0x92,0x51,0xe7,0x90,0x82,0xec,0xda,0x86,0x6e,0xfe,0xf1,0x3c,0x45,0x9e,0x1a
         ,0x63,0x13,0x86,0xb7,0xe3,0x54,0xc8,0x99,0xf5,0xf1,0x12,0xca,0x85,0xd7,0x15,0x83]

    qinv = [0x4f,0x45,0x6c,0x50,0x24,0x93,0xbd,0xc0,0xed,0x2a,0xb7,0x56,0xa3,0xa6,0xed,0x4d
           ,0x67,0x35,0x2a,0x69,0x7d,0x42,0x16,0xe9,0x32,0x12,0xb1,0x27,0xa6,0x3d,0x54,0x11
           ,0xce,0x6f,0xa9,0x8d,0x5d,0xbe,0xfd,0x73,0x26,0x3e,0x37,0x28,0x14,0x27,0x43,0x81
           ,0x81,0x66,0xed,0x7d,0xd6,0x36,0x87,0xdd,0x2a,0x8c,0xa1,0xd2,0xf4,0xfb,0xd8,0xe1]

testPKCSVectors :: [(ByteString,ByteString,ByteString)] -- Message,seed,Ciphertext
testPKCSVectors = [(BS.pack m,BS.pack seed,BS.pack cipher)]
  where
  m = [0x66,0x28,0x19,0x4e,0x12,0x07,0x3d,0xb0,0x3b,0xa9,0x4c,0xda,0x9e,0xf9,0x53
      ,0x23,0x97,0xd5,0x0d,0xba,0x79,0xb9,0x87,0x00,0x4a,0xfe,0xfe,0x34]
  seed = [0x01,0x73,0x41,0xae,0x38,0x75,0xd5,0xf8,0x71,0x01,0xf8,0xcc,0x4f,0xa9,0xb9,0xbc
         ,0x15,0x6b,0xb0,0x46,0x28,0xfc,0xcd,0xb2,0xf4,0xf1,0x1e,0x90,0x5b,0xd3,0xa1,0x55
         ,0xd3,0x76,0xf5,0x93,0xbd,0x73,0x04,0x21,0x08,0x74,0xeb,0xa0,0x8a,0x5e,0x22,0xbc
         ,0xcc,0xb4,0xc9,0xd3,0x88,0x2a,0x93,0xa5,0x4d,0xb0,0x22,0xf5,0x03,0xd1,0x63,0x38
         ,0xb6,0xb7,0xce,0x16,0xdc,0x7f,0x4b,0xbf,0x9a,0x96,0xb5,0x97,0x72,0xd6,0x60,0x6e
         ,0x97,0x47,0xc7,0x64,0x9b,0xf9,0xe0,0x83,0xdb,0x98,0x18,0x84,0xa9,0x54,0xab,0x3c
         ,0x6f]
  cipher = [0x50,0xb4,0xc1,0x41,0x36,0xbd,0x19,0x8c,0x2f,0x3c,0x3e,0xd2,0x43,0xfc,0xe0,0x36
           ,0xe1,0x68,0xd5,0x65,0x17,0x98,0x4a,0x26,0x3c,0xd6,0x64,0x92,0xb8,0x08,0x04,0xf1
           ,0x69,0xd2,0x10,0xf2,0xb9,0xbd,0xfb,0x48,0xb1,0x2f,0x9e,0xa0,0x50,0x09,0xc7,0x7d
           ,0xa2,0x57,0xcc,0x60,0x0c,0xce,0xfe,0x3a,0x62,0x83,0x78,0x9d,0x8e,0xa0,0xe6,0x07
           ,0xac,0x58,0xe2,0x69,0x0e,0xc4,0xeb,0xc1,0x01,0x46,0xe8,0xcb,0xaa,0x5e,0xd4,0xd5
           ,0xcc,0xe6,0xfe,0x7b,0x0f,0xf9,0xef,0xc1,0xea,0xbb,0x56,0x4d,0xbf,0x49,0x82,0x85
           ,0xf4,0x49,0xee,0x61,0xdd,0x7b,0x42,0xee,0x5b,0x58,0x92,0xcb,0x90,0x60,0x1f,0x30
           ,0xcd,0xa0,0x7b,0xf2,0x64,0x89,0x31,0x0b,0xcd,0x23,0xb5,0x28,0xce,0xab,0x3c,0x31]

-- https://das-labor.org/svn/microcontroller-2/crypto-lib/testvectors/rsa-pkcs-1v2-1-vec/oaep-vect.txt
testOAEPVectors :: [(ByteString,ByteString,ByteString)] -- Message,seed,Ciphertext
testOAEPVectors = [(BS.pack m,BS.pack seed,BS.pack cipher)]
  where
  m = [0x66,0x28,0x19,0x4e,0x12,0x07,0x3d,0xb0,0x3b,0xa9,0x4c,0xda,0x9e,0xf9,0x53
      ,0x23,0x97,0xd5,0x0d,0xba,0x79,0xb9,0x87,0x00,0x4a,0xfe,0xfe,0x34]
  seed = [0x18,0xb7,0x76,0xea,0x21,0x06,0x9d,0x69,0x77,0x6a,0x33,0xe9,0x6b,0xad,0x48,0xe1
         ,0xdd,0xa0,0xa5,0xef]
  cipher = [0x35,0x4f,0xe6,0x7b,0x4a,0x12,0x6d,0x5d,0x35,0xfe,0x36,0xc7,0x77,0x79,0x1a,0x3f
           ,0x7b,0xa1,0x3d,0xef,0x48,0x4e,0x2d,0x39,0x08,0xaf,0xf7,0x22,0xfa,0xd4,0x68,0xfb
           ,0x21,0x69,0x6d,0xe9,0x5d,0x0b,0xe9,0x11,0xc2,0xd3,0x17,0x4f,0x8a,0xfc,0xc2,0x01
           ,0x03,0x5f,0x7b,0x6d,0x8e,0x69,0x40,0x2d,0xe5,0x45,0x16,0x18,0xc2,0x1a,0x53,0x5f
           ,0xa9,0xd7,0xbf,0xc5,0xb8,0xdd,0x9f,0xc2,0x43,0xf8,0xcf,0x92,0x7d,0xb3,0x13,0x22
           ,0xd6,0xe8,0x81,0xea,0xa9,0x1a,0x99,0x61,0x70,0xe6,0x57,0xa0,0x5a,0x26,0x64,0x26
           ,0xd9,0x8c,0x88,0x00,0x3f,0x84,0x77,0xc1,0x22,0x70,0x94,0xa0,0xd9,0xfa,0x1e,0x8c
           ,0x40,0x24,0x30,0x9c,0xe1,0xec,0xcc,0xb5,0x21,0x00,0x35,0xd4,0x7a,0xc7,0x2e,0x8a]

testPKCSEncrypt :: PublicKey -> (ByteString,ByteString,ByteString) -> Assertion
testPKCSEncrypt pubk (m,seed,cipher) = rsaesPKCS1v1_5Encrypt seed pubk m @=? cipher

testPKCSDecrypt :: PrivateKey -> (ByteString,ByteString,ByteString) -> Assertion
testPKCSDecrypt privk (m,_,cipher) = rsaesPKCS1v1_5Decrypt privk cipher @=? m

encryptionPKCS :: Test
encryptionPKCS = testGroup "Encryption PKCS" $ map with testPKCSVectors
  where
    with t@(m,_,_) = testCase (shorten $ show m)  $ testPKCSEncrypt testPubKey t

decryptionPKCS :: Test
decryptionPKCS = testGroup "Decryption PKCS" $ map with testPKCSVectors
  where
    with t@(m,_,_) = testCase (shorten $ show m)  $ testPKCSDecrypt testPrivKey t


testOAEPEncrypt :: PublicKey -> (ByteString,ByteString,ByteString) -> Assertion
testOAEPEncrypt pubk (m,seed,cipher) = rsaesOAEPEncrypt sha1rec seed pubk m Nothing @=? cipher

testOAEPDecrypt :: PrivateKey -> (ByteString,ByteString,ByteString) -> Assertion
testOAEPDecrypt privk (m,_,cipher) = rsaesOAEPDecrypt sha1rec privk cipher Nothing @=? m

encryptionOAEP :: Test
encryptionOAEP = testGroup "Encryption OAEP" $ map with testOAEPVectors
  where
    with t@(m,_,_) = testCase (shorten $ show m)  $ testOAEPEncrypt testPubKey t

decryptionOAEP :: Test
decryptionOAEP = testGroup "Decryption OAEP" $ map with testOAEPVectors
  where
    with t@(m,_,_) = testCase (shorten $ show m)  $ testOAEPDecrypt testPrivKey t

sha1rec :: Recommended SHA1
sha1rec = undefined

tests :: [Test]
tests = [ encryptionPKCS
        , decryptionPKCS
        , encryptionOAEP
        , decryptionOAEP
        ]
